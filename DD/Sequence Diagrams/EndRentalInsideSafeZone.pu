@startuml
actor "Active User" as AU
participant "User Application" as UApp
participant "Client Handler" as CH
participant "Reservation Manager" as RM
participant "Car Manager" as CM
participant "Payment Handler" as PH
participant "ModelManager" as MM



actor "Car"
activate Car
activate AU
activate UApp
AU -> UApp : parkCarIntention()
UApp -> UApp : retrieveRealPosition()
'-> client side check to be in safe zone'
activate CH
UApp ->> CH : parkRequest(CarID, AU_ID)
activate RM
CH ->> RM :  parkRequest(CarID, AU_ID)
activate CM
RM ->> CM : getCarInfo(CarID,AU_ID)
CM ->> Car : retrieveCarPosition (CarID)
CM <<-- Car : <<Current Position>>
RM <<- CM : carStatus(Car)
'Server side check of car position'
RM -> RM : verifyBoundaries(Car)
activate MM
RM ->> CM : terminateRental(CarID, AU_ID)
CM ->> MM : updateStatus(CarID,PARKED)
RM ->> RM : computeFare()
activate PH
RM ->> PH : makePayment(User, amount)
CH <<- RM : showFare(Payment)
UApp <<- CH :showFare(Payment)


'The customer will terminate the rental on the app and then get off so the car
'is freed after "some" time
CM <<- Car : <<Doors Locked, Car Empty>>
CM ->> MM : updateStatus(CarID,FREE)
CM ->> Car : setState(FREE)
...
RM <<- PH : paymentSuccessful(User, PaymentSeqID)
deactivate PH
CH <<-- RM :  paymentSuccessful(User, PaymentSeqID)
UApp <<-- CH : paymentSuccessful(PaymentSeqID)
UApp -> UApp : showSuccesfulPayment()
deactivate PH

@enduml
